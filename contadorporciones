import React, { useEffect, useMemo, useState } from "react";

// Contador de Porciones — Plan diario basado en pauta de la nutricionista
// Características:
// - Metas diarias por grupo de alimentos
// - Botones rápidos por comida (desayuno, colaciones, almuerzo, once/cena)
// - Suma/resta en pasos de 0.5 porción
// - Barra de progreso y alerta si se excede la meta
// - Editar metas (por si cambian)
// - Reinicio del día y Deshacer (undo)
// - Persistencia en localStorage

// Grupos base y metas por día (puedes editarlas en la UI)
const DEFAULT_GOALS = {
  Cereales: 3.5,
  "Verduras (general)": 1,
  "Verduras (libre)": 2,
  Frutas: 4,
  Lácteos: 3,
  "Carnes bajas": 8,
  "Lípidos": 1.5,
};

// Presets de porciones por comida (según pauta)
const MEAL_PRESETS = {
  Desayuno: {
    Lácteos: 1,
    "Carnes bajas": 2,
  },
  "Colación AM": {
    Cereales: 0.5,
    Frutas: 2,
    Lácteos: 1,
    "Carnes bajas": 1,
  },
  Almuerzo: {
    Cereales: 1,
    "Verduras (general)": 1,
    "Verduras (libre)": 1,
    "Carnes bajas": 2,
    Lípidos: 0.5,
  },
  "Colación PM": {
    Cereales: 1,
    Frutas: 2,
    "Carnes bajas": 1,
  },
  "Once/Cena": {
    Cereales: 1,
    "Verduras (libre)": 1,
    Lácteos: 1,
    "Carnes bajas": 2,
    Lípidos: 1,
  },
};

const STORAGE_KEY = "contador-porciones-josefa-v1";

function usePersistentState(initial) {
  const [state, setState] = useState(() => {
    try {
      const raw = localStorage.getItem(STORAGE_KEY);
      return raw ? JSON.parse(raw) : initial;
    } catch (e) {
      return initial;
    }
  });

  useEffect(() => {
    localStorage.setItem(STORAGE_KEY, JSON.stringify(state));
  }, [state]);

  return [state, setState];
}

function ProgressBar({ value, goal }) {
  const pct = Math.min(100, (value / goal) * 100);
  const over = value > goal;
  return (
    <div className="w-full h-3 rounded-xl bg-gray-200 overflow-hidden">
      <div
        className={`h-3 transition-all ${
          over ? "bg-red-500" : value >= goal ? "bg-green-500" : "bg-blue-500"
        }`}
        style={{ width: `${goal === 0 ? 0 : pct}%` }}
        aria-label={`Progreso ${value}/${goal}`}
      />
    </div>
  );
}

export default function PortionCounter() {
  const [data, setData] = usePersistentState({
    goals: DEFAULT_GOALS,
    counts: Object.fromEntries(Object.keys(DEFAULT_GOALS).map((k) => [k, 0])),
    history: [], // para undo
    lastReset: new Date().toISOString().slice(0, 10),
  });

  // Reinicio automático si cambió el día
  useEffect(() => {
    const today = new Date().toISOString().slice(0, 10);
    if (data.lastReset !== today) {
      setData((s) => ({
        ...s,
        counts: Object.fromEntries(Object.keys(s.goals).map((k) => [k, 0])),
        history: [],
        lastReset: today,
      }));
    }
  }, []); // solo al cargar

  const groups = useMemo(() => Object.keys(data.goals), [data.goals]);

  const totalProgress = useMemo(() => {
    const goalsSum = groups.reduce((acc, g) => acc + (data.goals[g] || 0), 0);
    const countsSum = groups.reduce((acc, g) => acc + (data.counts[g] || 0), 0);
    return { goalsSum, countsSum };
  }, [groups, data.goals, data.counts]);

  function pushHistory() {
    setData((s) => ({ ...s, history: [...s.history, { counts: s.counts }] }));
  }

  function applyDelta(group, delta) {
    pushHistory();
    setData((s) => ({
      ...s,
      counts: { ...s.counts, [group]: Math.max(0, roundHalf(s.counts[group] + delta)) },
    }));
  }

  function addMeal(mealName) {
    const preset = MEAL_PRESETS[mealName];
    if (!preset) return;
    pushHistory();
    setData((s) => {
      const next = { ...s.counts };
      for (const [g, v] of Object.entries(preset)) {
        next[g] = Math.max(0, roundHalf((next[g] ?? 0) + v));
      }
      return { ...s, counts: next };
    });
  }

  function undo() {
    setData((s) => {
      const last = s.history[s.history.length - 1];
      if (!last) return s;
      const nh = s.history.slice(0, -1);
      return { ...s, counts: last.counts, history: nh };
    });
  }

  function resetDay() {
    if (!confirm("¿Reiniciar conteo de hoy?\nSe pondrá todo en 0.")) return;
    const today = new Date().toISOString().slice(0, 10);
    setData((s) => ({
      ...s,
      counts: Object.fromEntries(Object.keys(s.goals).map((k) => [k, 0])),
      history: [],
      lastReset: today,
    }));
  }

  function updateGoal(group, value) {
    const v = Math.max(0, Number(value) || 0);
    setData((s) => ({ ...s, goals: { ...s.goals, [group]: v } }));
  }

  return (
    <div className="min-h-screen bg-gradient-to-b from-slate-50 to-slate-100 text-slate-900 p-6">
      <div className="max-w-5xl mx-auto grid gap-6">
        <header className="flex items-center justify-between flex-wrap gap-4">
          <div>
            <h1 className="text-2xl sm:text-3xl font-bold">Contador de Porciones</h1>
            <p className="text-sm text-slate-600">
              Plan diario basado en metas de porciones. Suma por comida o por grupo.
            </p>
          </div>
          <div className="flex gap-2">
            <button onClick={undo} className="px-3 py-2 rounded-xl bg-white shadow hover:shadow-md">Deshacer</button>
            <button onClick={resetDay} className="px-3 py-2 rounded-xl bg-rose-600 text-white shadow hover:shadow-md">Reiniciar día</button>
          </div>
        </header>

        {/* Progreso global */}
        <section className="rounded-2xl bg-white p-4 shadow-sm">
          <div className="flex items-end justify-between gap-4 mb-3">
            <div>
              <h2 className="text-lg font-semibold">Progreso total</h2>
              <p className="text-sm text-slate-600">
                {totalProgress.countsSum.toFixed(1)} / {totalProgress.goalsSum.toFixed(1)} porciones
              </p>
            </div>
            <div className="text-sm text-slate-500">{new Date().toLocaleDateString()}</div>
          </div>
          <ProgressBar value={totalProgress.countsSum} goal={totalProgress.goalsSum} />
        </section>

        {/* Botones de comidas */}
        <section className="rounded-2xl bg-white p-4 shadow-sm">
          <h2 className="text-lg font-semibold mb-3">Agregar por comida</h2>
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-5 gap-3">
            {Object.keys(MEAL_PRESETS).map((meal) => (
              <button
                key={meal}
                onClick={() => addMeal(meal)}
                className="rounded-2xl border border-slate-200 p-3 hover:shadow transition text-left"
                title={Object.entries(MEAL_PRESETS[meal]).map(([g, v]) => `+${v} ${g}`).join(" | ")}
              >
                <div className="font-semibold">{meal}</div>
                <div className="text-xs text-slate-600 mt-1">
                  {Object.entries(MEAL_PRESETS[meal])
                    .map(([g, v]) => (
                      <span key={g} className="inline-block mr-2">+{v} {g}</span>
                    ))}
                </div>
              </button>
            ))}
          </div>
        </section>

        {/* Tarjetas de grupos */}
        <section className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
          {groups.map((g) => {
            const val = data.counts[g] || 0;
            const goal = data.goals[g] || 0;
            const remaining = Math.max(0, roundHalf(goal - val));
            const over = val > goal;
            return (
              <div key={g} className="rounded-2xl bg-white p-4 shadow-sm border border-slate-100">
                <div className="flex items-center justify-between gap-2 mb-2">
                  <h3 className="font-semibold text-slate-800">{g}</h3>
                  <div className="text-xs text-slate-500">Meta: {goal} porciones</div>
                </div>
                <ProgressBar value={val} goal={goal || 1} />
                <div className="mt-2 flex items-center justify-between">
                  <div className={`text-sm ${over ? "text-rose-600" : "text-slate-600"}`}>
                    {over ? `+${roundHalf(val - goal)} sobre meta` : `${remaining} restante(s)`}
                  </div>
                  <div className="text-sm font-medium">{val.toFixed(1)}</div>
                </div>
                <div className="mt-3 grid grid-cols-4 gap-2">
                  <button className="px-2 py-1 rounded-xl bg-slate-100 hover:bg-slate-200" onClick={() => applyDelta(g, -1)}>-1</button>
                  <button className="px-2 py-1 rounded-xl bg-slate-100 hover:bg-slate-200" onClick={() => applyDelta(g, -0.5)}>-0.5</button>
                  <button className="px-2 py-1 rounded-xl bg-slate-800 text-white hover:bg-slate-700" onClick={() => applyDelta(g, +0.5)}>+0.5</button>
                  <button className="px-2 py-1 rounded-xl bg-slate-800 text-white hover:bg-slate-700" onClick={() => applyDelta(g, +1)}>+1</button>
                </div>
                <div className="mt-3 text-xs text-slate-500">Ajusta en pasos de 0.5</div>
                <div className="mt-3 border-t pt-3">
                  <label className="text-xs text-slate-600">Editar meta</label>
                  <div className="flex items-center gap-2 mt-1">
                    <input
                      type="number"
                      step="0.5"
                      className="w-24 rounded-xl border px-3 py-2 text-sm"
                      value={goal}
                      onChange={(e) => updateGoal(g, e.target.value)}
                    />
                    <span className="text-xs text-slate-500">porciones/día</span>
                  </div>
                </div>
              </div>
            );
          })}
        </section>

        {/* Tips */}
        <section className="rounded-2xl bg-white p-4 shadow-sm">
          <h2 className="text-lg font-semibold mb-2">Consejos de uso</h2>
          <ul className="text-sm text-slate-700 list-disc ml-5 space-y-1">
            <li>Usa los botones de comida para cargar rápido lo que comiste.</li>
            <li>Si cambian tus metas, ajústalas en cada tarjeta (se guardan automáticamente).</li>
            <li>Deshacer corrige el último cambio. Reiniciar pone todo en 0 para el día.</li>
            <li>El contador se guarda solo en tu navegador (no se comparte).</li>
          </ul>
        </section>

        <footer className="py-6 text-center text-xs text-slate-500">
          Hecho con ❤️ para llevar el control de porciones diarias.
        </footer>
      </div>
    </div>
  );
}

function roundHalf(n) {
  return Math.round(n * 2) / 2;
}
